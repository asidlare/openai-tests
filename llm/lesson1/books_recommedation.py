'''
ğŸ§  Zadanie 1.2.1
Twoim zadaniem jest stworzenie prostego asystenta, ktÃ³ry bÄ™dzie dziaÅ‚aÅ‚ w okreÅ›lonym kontekÅ›cie i
zgodnie z wybranymi przez Ciebie zaÅ‚oÅ¼eniami. MoÅ¼esz nadaÄ‡ mu imiÄ™, okreÅ›liÄ‡ sposÃ³b, w jaki
powinien siÄ™ komunikowaÄ‡ (np. formalnie lub nieformalnie), oraz zaprojektowaÄ‡ jego "osobowoÅ›Ä‡".
Dodatkowo sprÃ³buj wyznaczyÄ‡ mu konkretne zastosowanie â€“ na przykÅ‚ad asystent moÅ¼e pomagaÄ‡
w tÅ‚umaczeniach, udzielaÄ‡ wskazÃ³wek w wybranej dziedzinie, czy wspieraÄ‡ uÅ¼ytkownika w codziennych
zadaniach.

Celem jest zarÃ³wno okreÅ›lenie "zachowania" asystenta, jak i zaproponowanie praktycznego
scenariusza, w ktÃ³rym jego dziaÅ‚anie przyniesie wartoÅ›Ä‡ uÅ¼ytkownikowi. PomyÅ›l kreatywnie i
postaraj siÄ™ zaprojektowaÄ‡ coÅ›, co mogÅ‚oby byÄ‡ naprawdÄ™ uÅ¼yteczne i inspirujÄ…ce!
'''


from llm.utils import get_simple_response

def books_assistant(user_prompt):
    role_system_desc = '''
        You are an expert who recommends books similar to book (author and title) from a query.
        Your task is to recommend 3 books written by 3 different authors (exclude the author from query).
        The response should include: author/authors, title and short summary (max 2 sentences).
        The answer for each position should 2 lines: author and title in the first line and summary in the second line.
        Start from the most relevant position. Add numeration.
    '''
    messages = [
        { "role": "system", "content": role_system_desc },
        { "role": "user", "content": user_prompt}
    ]

    return get_simple_response(messages)


if __name__ == "__main__":
    response = books_assistant("Carl Sagan, Pale Blue Dot")
    print(response)
    response = books_assistant("Michio Kaku, Quantum supremacy")
    print(response)