from crewai import Agent, Task, Crew
from crewai_tools import MCPServerAdapter
from mcp import StdioServerParameters
from langchain_openai import ChatOpenAI
import os
from llm.mcp_ml.output_model import SalaryResponse
from llm.utils import get_openai_api_key, get_openai_model


llm = ChatOpenAI(
    openai_api_key=get_openai_api_key(),
    model_name=get_openai_model(),
)

server_params=StdioServerParameters(
    command="python3", # Or your python3 executable i.e. "python3"
    args=["llm/mcp_ml/salary_prediction_mcp_server.py"],
    env={"PYTHON": "3.12", **os.environ},
)

def salary_prediction(question):
    with MCPServerAdapter(server_params) as tools:
        print(f"Available tools from Stdio MCP server: {[tool.name for tool in tools]}")

        agent = Agent(
            role="Analyst specializing in salary prediction.",
            goal="Answering the question about salary prediction based on job norm_title and experience level.",
            backstory="An AI that can predict salary based on extracted info from question via an MCP tool.",
            tools=tools,
            verbose=True,
        )
        task = Task(
            description=f"""
                Prepare response based on following user question: {question}
                The expected output should include original question, 
                job norm_title and experience level based on the question content
                and normalized to values expected by output model
                and salary predicted by MCP Tool.
                Pydantic model for the response is defined as expected output.
                Use provided tool to calculate salary prediction.
                If the question is unanswerable or not related to salary prediction, answer with appropriate message
                in extra field, eg. 'Salary prediction is not available for this question.'
            """,
            agent=agent,
            output_pydantic=SalaryResponse,
            expected_output="response generated by pydantic model"
        )
        crew = Crew(
            agents=[agent],
            tasks=[task],
            llm=llm,
            verbose=True,
        )
        result = crew.kickoff()
        return result


if __name__ == "__main__":
    question = "What is the expected salary for a software developer  Senior-level experience?"
    result = salary_prediction(question)
    print(result.pydantic.model_dump())
